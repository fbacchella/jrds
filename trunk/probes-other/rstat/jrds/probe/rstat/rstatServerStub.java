/*
 * Automatically generated by jrpcgen 1.0.6 on 14/01/06 17:53
 * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
 * See http://remotetea.sourceforge.net for details
 */
package jrds.probe.rstat;
import org.acplt.oncrpc.*;
import java.io.IOException;

import java.net.InetAddress;

import org.acplt.oncrpc.server.*;

/**
 */
public abstract class rstatServerStub extends OncRpcServerStub implements OncRpcDispatchable {

    public rstatServerStub()
           throws OncRpcException, IOException {
        this(0);
    }

    public rstatServerStub(int port)
           throws OncRpcException, IOException {
        this(null, port);
    }

    public rstatServerStub(InetAddress bindAddr, int port)
           throws OncRpcException, IOException {
        info = new OncRpcServerTransportRegistrationInfo [] {
            new OncRpcServerTransportRegistrationInfo(rstat.RSTATPROG, 4),
            new OncRpcServerTransportRegistrationInfo(rstat.RSTATPROG, 3),
        };
        transports = new OncRpcServerTransport [] {
            new OncRpcUdpServerTransport(this, bindAddr, port, info, 32768),
            new OncRpcTcpServerTransport(this, bindAddr, port, info, 32768)
        };
    }

    public void dispatchOncRpcCall(OncRpcCallInformation call, int program, int version, int procedure)
           throws OncRpcException, IOException {
        if ( version == 4 ) {
            switch ( procedure ) {
            case 1: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                statsvar result$ = RSTATPROC_STATS_4();
                call.reply(result$);
                break;
            }
            case 2: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                XdrInt result$ = new XdrInt(RSTATPROC_HAVEDISK_4());
                call.reply(result$);
                break;
            }
            default:
                call.failProcedureUnavailable();
            }
        } else if ( version == 3 ) {
            switch ( procedure ) {
            case 1: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                statstime result$ = RSTATPROC_STATS_3();
                call.reply(result$);
                break;
            }
            case 2: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                XdrInt result$ = new XdrInt(RSTATPROC_HAVEDISK_3());
                call.reply(result$);
                break;
            }
            default:
                call.failProcedureUnavailable();
            }
        } else {
            call.failProcedureUnavailable();
        }
    }

    public abstract statsvar RSTATPROC_STATS_4();

    public abstract int RSTATPROC_HAVEDISK_4();

    public abstract statstime RSTATPROC_STATS_3();

    public abstract int RSTATPROC_HAVEDISK_3();

}
// End of rstatServerStub.java
